install.packages("swirl")
library(swirl)
swirl()
5+7
x <- 5+7
x
y <- x-3
y
z <- c(1.1, 9, 3.14)
?c
z
z, 555, z
c(z, 555, z)
z * 2 + 100
mysqrt <- sqrt(z-1)
mySqrt <- sqrt(z-1)
mySqrt
myDiv <- z/mySqrt
myDic
myDiv
c(1, 2, 3, 4) + x(0, 10)
x(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
1:20
pi:10
15:1
?`:`
seq(1, 20)
seq(0, 10, by=0.5)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 2), each = 10)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "Amer")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("X", "Y", "Z"), sep="")
paste(LETTERS, 1:4, sep = "-")
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
myData <- sample(c(y, z), 100)
myNA <- is.na(myData)
myNa
myNA
myData == NA
sum(myNA)
myData
0/0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x > 0]
x[c(3, 5, 7)]
x[0]
x[30000]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
myVect <- (1:20)
myVect <- 1:20
myVector <- 1:20
myVector
dim(myVector)
length(myVector)
dim(myVector) <- c(4,5)
dim(myVector)
attributes(myVector)
myVector
class(myVector)
myMatrix <- myVector
?matrix
myMatrix2 <- (1:20, 4, 5)
myMatrix <- matrix(1:20, 4, 5)
myMatrix2 <- matrix(1:20, 4, 5)
identical(myMatrix, myMatrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, myMatrix)
myData <- data.frame(patients, myMatrix)
myData
class(myData)
cnames <- ("patient", "age", "weight", "bp", "rating", "test")
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(myData)
colnames(myData) <- cnames
myData
x <- 1
print(x)
x
msg <- "hello"
msg
x <-
5
x
x <- 6 ## nothing printer
x
x <- factor(c("yes", "yes", "no", "yes", "no"))
x
table(x)
unclass(x)
x <- factor(c("yes", "yes", "no", "yes", "no"))
levels = c("yes", "no")
x
x <- factor(c("yes", "yes", "no", "yes", "no"), levels = c("yes", "no")
)
x
x <- data.frame(foo = 1:4, bar = c(T, T, F, F))
x
install.packages("KernSmooth")
library(KernSmooth)
add2 <- function(x, y) {
x + y
}  ## note that function will return whatever the last expression was
add2(3, 5)
above <- function(x, n) {
use <- x > n
x[n]      ## returns subset of vector x that is bigger than 10
}
above(x, 12)
x <- 1:20
above(x, 12)
above <- function(x, n) {
use <- x > n
x[use]      ## returns subset of vector x that is bigger than 10
}
x <- 1:20
above(x, 12)
above <- function(x, n = 10) {
use <- x > n
x[se]      ## returns subset of vector x that is bigger than 10
}
above(x)
above <- function(x, n = 10) {
use <- x > n
x[use]      ## returns subset of vector x that is bigger than 10
}
above(10)
x <- 1:20
above(x)
columnmean <- function(y) {
nc <- ncol(y) ## number of columns of y
means <- numeric(nc) ## empty vector with zeros at the begining that will be filled with means
for(i in 1:nc) {
means[i] <- mean(y[, i])
}
means
}
columnmean(airquality)
columnmean <- function(y, removeNA = TRUE) {
nc <- ncol(y) ## number of columns of y
means <- numeric(nc) ## empty vector with zeros at the begining that will be filled with means
for(i in 1:nc) {
means[i] <- mean(y[, i], na.rm = removeNA)
}
means
}
columnmean(airquality)
clear
clear all
cube <- function(x, n) {}
cube <- function(x, n) {
x^3
}
cube(3)
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
library(datasets)
data(iris)
lapply(split(iris, "Species"), mean)
lapply(split(iris, "Species"), mean(iris, na.rm = TRUE))
with(iris, tapply("Sepal.Length", "Species", mean))
with(iris, tapply("Sepal.Length", "Species", mean(iris, na.rm = TRUE)))
split(iris)
str(split(iris, "Species", drop = TRUE))
split(iris, iris$Species)
lapply(s, function(x) colMeans(x[, "Sepal.Length"]))
colMeans(s)
s <-  split(iris, iris$Species)
lapply(s, function(x) colMeans(x[, "Sepal.Length"]))
lapply(x, function(s) colMeans(s[, "Sepal.Length"]))
lapply(s, function(s) colMeans(s[, "Sepal.Length"]))
> lapply(x, function(s) colMeans(iris[, "Sepal.Length"]))
lapply(x, function(s) colMeans(iris[, "Sepal.Length"]))
> lapply(s, function(s) colMeans(iris[, "Sepal.Length"]))
lapply(s, function(s) colMeans(iris[, "Sepal.Length"]))
as.numeric(iris)
s
sapply(s, function(x), colMeans(x[, "Sepal.Length"]))
sapply(s, function(s), colMeans(s[, "Septal.Length"])
sapply(s, function(s) colMeans(s[, "Sepal.Length"]))
s[,"Sepal.Length"]
iris[,"Sepal.Length"]
sapply(s, function(s) colMeans(iris[, "Sepal.Length"]))
sapply(s, function(s) colMeans(iris)
)
tapply
tapply(iris, "Species", mean)
?tapply
tapply(iris, s, mean)
tapply(iris, iris$Species, mean)
tapply(iris[, 1], iris$Species, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
tf <- matrix(1:4, 2,2)
tf
tf1 <- solve(tf)
tf1
tf %*% tf1
x <- matrix
x
x <- matrix(1:4, 2, 2)
x
cachematrix
load(cachematrix)
load("cachematrix")
setwd("C:/Users/Amer/Desktop/R Dir/ProgrammingAssignment2")
load(cachematrix)
load("cachematrix")
load("cachematrix.R")
load("cachematrix.R")
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y           ## the <-- operator causes a search for variable in
inv <<- NULL      ## parent environment first (makeCacheMatrix) in this case
}
get <- function() { x }
setinverse <- function(inverse) { inv <<- inverse }
getinverse <- function() { inv }
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
makeCacheMatrix(x = matrix(1:4, 2, 2))
load
load(cachematrix.R)
load(file = cachematrix.R)
load(file = "cachematrix.R")
load(file = "cachematrix.R")
